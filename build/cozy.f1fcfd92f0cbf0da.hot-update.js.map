{"version":3,"file":"cozy.f1fcfd92f0cbf0da.hot-update.js","sources":["/Users/vincelinise/Documents/GitHub/cozy-home/node_modules/cozy-search/dist/components/helpers.js","/Users/vincelinise/Documents/GitHub/cozy-home/node_modules/cozy-search/dist/components/queries.js"],"sourcesContent":["import flag from 'cozy-flags';\nexport const getInstantMessage = assistantState => Object.keys(assistantState.message)\n    .sort((a, b) => a - b)\n    .map(key => assistantState.message[key])\n    .join('');\nexport const makeConversationId = () => `${Date.now()}-${Math.floor(Math.random() * 90000) + 10000}`;\nexport const pushMessagesIdInState = (id, res, setState) => {\n    if (id !== res._id)\n        return;\n    const messagesId = res.messages.map(message => message.id);\n    setState(v => (Object.assign(Object.assign({}, v), { messagesId })));\n};\nexport const isMessageForThisConversation = (res, messagesId) => messagesId.includes(res._id);\nexport const isAssistantEnabled = () => flag('cozy.assistant.enabled');\n/**\n * Sanitize chat content by removing special sources tags like\n * [REF]...[/REF] or [doc_X] that are not currently handled.\n *\n * @param {string} content - content to sanitize\n * @returns {string} sanitized content\n */\nexport const sanitizeChatContent = content => {\n    if (!content) {\n        return '';\n    }\n    return (content\n        // Remove REFdoc_1/REF\n        .replace(/\\s?\\[REF\\][\\s\\S]*?\\[\\/REF\\]/g, '')\n        // Remove [REF]doc_1[/REF]\n        .replace(/\\s?REF[\\s\\S]*?\\/REF/g, '')\n        // remove « [doc_1] »\n        .replace(/\\s?\\[doc_\\d+\\]/g, ''));\n};\n","import { Q, fetchPolicies } from 'cozy-client';\nconst CONTACTS_DOCTYPE = 'io.cozy.contacts';\nexport const CHAT_CONVERSATIONS_DOCTYPE = 'io.cozy.ai.chat.conversations';\nexport const CHAT_EVENTS_DOCTYPE = 'io.cozy.ai.chat.events';\nexport const FILES_DOCTYPE = 'io.cozy.files';\nconst defaultFetchPolicy = fetchPolicies.olderThan(86400); // 24 hours\nexport const buildFilesByIds = ids => {\n    return {\n        definition: Q(FILES_DOCTYPE).getByIds(ids),\n        options: {\n            as: `${FILES_DOCTYPE}/${ids.join('')}`,\n            fetchPolicy: defaultFetchPolicy\n        }\n    };\n};\nexport const buildChatConversationQueryById = id => {\n    return {\n        definition: Q(CHAT_CONVERSATIONS_DOCTYPE).getById(id),\n        options: {\n            as: `${CHAT_CONVERSATIONS_DOCTYPE}/${id}`,\n            fetchPolicy: defaultFetchPolicy,\n            singleDocData: true\n        }\n    };\n};\nexport const buildMyselfQuery = () => {\n    return {\n        definition: Q(CONTACTS_DOCTYPE).where({ me: true }),\n        options: {\n            as: `${CONTACTS_DOCTYPE}/myself`,\n            fetchPolicy: defaultFetchPolicy\n        }\n    };\n};\nexport const buildRecentConversationsQuery = () => ({\n    definition: () => Q(CHAT_CONVERSATIONS_DOCTYPE)\n        .where({\n        // TODO : fix\n        'cozyMetadata.updatedAt': { $gt: new Date(\"1999-01-01T00:00:00Z\") },\n    })\n        .indexFields([\n        'cozyMetadata.updatedAt'\n    ])\n        .sortBy([{ 'cozyMetadata.updatedAt': 'desc' }])\n        .limitBy(50),\n    options: {\n        as: CHAT_CONVERSATIONS_DOCTYPE + '/recent',\n        fetchPolicy: defaultFetchPolicy\n    }\n});\n"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}